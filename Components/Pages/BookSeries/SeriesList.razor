@using BookHeaven.Domain.Abstractions
@using BookHeaven.Domain.Features.BookSeries
@attribute [Route(Urls.Series)]
<PageTitle>@Translations.SERIES_PLURAL</PageTitle>

<Container>
    <MudTable
        Breakpoint="Breakpoint.None"
        Items="_items"
        Loading="_items == null"
        Dense="true"
        Hover="true">
        <ToolBarContent>
            <div class="flex items-center w-full">
                <span class="text-xl">Series</span>
                <MudButton
                    OnClick="OpenNewSeriesDialog"
                    Class="ms-auto"
                    StartIcon="@Icons.Material.Filled.Add"
                    Variant="Variant.Filled"
                    Color="Color.Tertiary">
                    New
                </MudButton>
            </div>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 300px;"/>
            <col/>
            <col style="width: 100px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Series, object>(x => x.Name!)">@Translations.NAME</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Series, object>(x => x.Books.Count())">@Translations.BOOKS</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Books.Count()</MudTd>
            <MudTd>
                <MudIconButton
                    OnClick="() => DeleteSeries(context.SeriesId)"
                    Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
</Container>

<MudDialog @bind-Visible="_isDialogOpen">
    <TitleContent>New series</TitleContent>
    <DialogContent>
        <MudTextField
            @bind-Value="_newSeriesName"
            Variant="Variant.Outlined"
            Label="Series name"/>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="() => _isDialogOpen = false">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="CreateNewSeries">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] private ISender Sender { get; set; } = null!;
    [Inject] private IAlertService AlertService { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    
    private List<Series>? _items;
    
    private bool _isDialogOpen;
    private string _newSeriesName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var getAllSeries = await Sender.Send(new GetAllSeries.Query(true));
        if (getAllSeries.IsFailure)
        {
            await AlertService.ShowToastAsync(getAllSeries.Error.Description, AlertSeverity.Error);
            return;
        }
        _items = getAllSeries.Value;
    }
    
    private void OpenNewSeriesDialog()
    {
        _newSeriesName = string.Empty;
        _isDialogOpen = true;
    }
    
    private async Task CreateNewSeries()
    {
        if (string.IsNullOrWhiteSpace(_newSeriesName))
        {
            await AlertService.ShowToastAsync("Series name cannot be empty", AlertSeverity.Warning);
            return;
        }
        
        var result = await Sender.Send(new CreateSeries.Command(_newSeriesName));
        if (result.IsFailure)
        {
            await AlertService.ShowToastAsync(result.Error.Description, AlertSeverity.Error);
            return;
        }
        
        _items!.Add(result.Value);
        _isDialogOpen = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task DeleteSeries(Guid seriesId)
    {
        var confirm = await AlertService.ShowConfirmationAsync("Delete Series", "Are you sure you want to delete this Series?<br/>This action cannot be undone.");
        if (!confirm) return;
		
        var result = await Sender.Send(new DeleteSeries.Command(seriesId));
        if (result.IsFailure)
        {
            await AlertService.ShowToastAsync(result.Error.Description, AlertSeverity.Error);
            return;
        }
		
        _items!.RemoveAll(c => c.SeriesId == seriesId);
        await InvokeAsync(StateHasChanged);
    }

}