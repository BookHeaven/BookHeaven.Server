@using BookHeaven.Domain.Enums
@using BookHeaven.Domain.Services
@using BookHeaven.Server.Abstractions
@attribute [Route(Urls.Shelf)]

@implements IDisposable

<PageTitle>@Translations.SHELF</PageTitle>

<ScrollToTop />

@if (IsLoading)
{
	return;
}

@if (BookManager.IsEmpty)
{
	<div class="absolute inset-0 flex items-center justify-center">
		<span class="text-4xl">@Translations.SHELF_EMPTY</span>
	</div>
	return;
}

<Topbar>
	<MudChipSet T="BookStatus" @bind-SelectedValue="BookManager.Filter" Class="mx-2" CheckMark>
		<MudChip Value="BookStatus.All" Variant="Variant.Text" Color="Color.Primary">@BookStatus.All.StringValue()</MudChip>	
		<MudChip Value="BookStatus.New" Variant="Variant.Text" Color="Color.Primary">@BookStatus.New.StringValue()</MudChip>
		<MudChip Value="BookStatus.Reading" Variant="Variant.Text" Color="Color.Primary">@BookStatus.Reading.StringValue()</MudChip>
		<MudChip Value="BookStatus.Finished" Variant="Variant.Text" Color="Color.Primary">@BookStatus.Finished.StringValue()</MudChip>
	</MudChipSet>
</Topbar>

@if (BookManager.Books.Count > 0)
{
	<BookGrid Books="BookManager.Books.OrderBy(b => b.Author?.Name).ThenBy(b => b.Series?.Name).ThenBy(b => b.SeriesIndex).ToList()" Center="true" />
}
else
{
	<div class="absolute inset-0 flex items-center justify-center">
		<span class="text-4xl">@Translations.SHELF_FILTER_NO_RESULTS</span>
	</div>
}


@code {
	[Inject] private NavigationManager NavigationManager { get; set; } = null!;
	[Inject] private IJSRuntime JsRuntime { get; set; } = null!;
	[Inject] private BookManager BookManager { get; set; } = null!;
	[Inject] private ISessionService SessionService { get; set; } = null!;
	[Inject] private EventsService EventsService { get; set; } = null!;
	
	private bool IsLoading { get; set; } = true;
	private Guid ProfileId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		EventsService.OnBookAdded += OnBookAdded;
		ProfileId = await SessionService.GetAsync<Guid>(SessionKey.SelectedProfileId);
		
		await BookManager.GetBooksAsync(ProfileId);
		IsLoading = false;
	}

	private async void OnBookAdded(Guid bookId)
	{
		await BookManager.AppendBookAsync(ProfileId, bookId);
		await InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		EventsService.OnBookAdded -= OnBookAdded;
		JsRuntime.InvokeVoidAsync("saveScrollPosition", Urls.Shelf);
	}

}
