@attribute [Route(Urls.Shelf)]

@implements IDisposable

<PageTitle>@Translations.SHELF</PageTitle>

<ScrollToTop />

@if (IsLoading)
{
	return;
}

@if (BookManager.IsEmpty)
{
	<div class="absolute inset-0 flex items-center justify-center text-center">
		<span class="text-2xl 2xl:text-4xl text-balance text-neutral-300">@Translations.SHELF_EMPTY</span>
	</div>
	return;
}

<Topbar>
	<MudChipSet T="BookStatus" @bind-SelectedValue="BookManager.Filter" CheckMark>
		<MudChip Value="BookStatus.All" Variant="Variant.Text" Color="Color.Primary" Class="mx-0.5">@BookStatus.All.StringValue()</MudChip>	
		<MudChip Value="BookStatus.New" Variant="Variant.Text" Color="Color.Primary" Class="mx-0.5">@BookStatus.New.StringValue()</MudChip>
		<MudChip Value="BookStatus.Reading" Variant="Variant.Text" Color="Color.Primary" Class="mx-0.5">@BookStatus.Reading.StringValue()</MudChip>
		<MudChip Value="BookStatus.Finished" Variant="Variant.Text" Color="Color.Primary" Class="mx-0.5">@BookStatus.Finished.StringValue()</MudChip>
	</MudChipSet>
</Topbar>

@if (BookManager.Books.Count > 0)
{
	<BookGrid 
		Books="BookManager.Books.OrderBy(b => b.Author?.Name).ThenBy(b => b.Series?.Name).ThenBy(b => b.SeriesIndex).ToList()" 
		Center="true"
		IsSelectMode="IsSelectMode"
		@bind-SelectedBooks="_selectedBooks"/>
	<BottomToolbar>
		@if (!IsSelectMode)
		{
			<MudButton
				OnClick="ToggleSelectMode"
				StartIcon="@Icons.Material.Filled.SelectAll"
				Color="Color.Secondary"
				IconSize="Size.Large"
				Size="Size.Large">
				Select mode
			</MudButton>
		}
		else
		{
			<MudIconButton 
				OnClick="ToggleSelectMode"
				Icon="@Icons.Material.Filled.Deselect"
				Color="Color.Secondary"/>
			<MudIconButton 
				OnClick="() => SelectIconAction.Invoke()"
				Icon="@SelectIcon"
				Variant="Variant.Filled" />
			<MudButton
				OnClick="OpenTagsDialog"
				Color="Color.Primary"
				Disabled="_selectedBooks.Count == 0">
				Tags
			</MudButton>
			<MudButton
				Color="Color.Primary"
				Disabled="_selectedBooks.Count == 0">
				Edit
			</MudButton>
			<MudSpacer/>
			
			<span class="ms-auto text-nowrap font-bold">@_selectedBooks.Count selected</span>
		}
	</BottomToolbar>
}
else
{
	<div class="absolute inset-0 flex items-center justify-center text-center">
		<span class="text-2xl 2xl:text-4xl text-balance text-neutral-300">@Translations.SHELF_FILTER_NO_RESULTS</span>
	</div>
}


@code {
	[Inject] private NavigationManager NavigationManager { get; set; } = null!;
	[Inject] private IJSRuntime JsRuntime { get; set; } = null!;
	[Inject] private BookManager BookManager { get; set; } = null!;
	[Inject] private ISessionService SessionService { get; set; } = null!;
	[Inject] private GlobalEventsService GlobalEventsService { get; set; } = null!;
	[Inject] private IDialogService DialogService { get; set; } = null!;
	
	private bool IsLoading { get; set; } = true;
	private Guid ProfileId { get; set; }
	
	private bool IsSelectMode { get; set; } = false;
	private List<Guid> _selectedBooks = [];
	private string SelectIcon => _selectedBooks.Count switch
	{
		0 => Icons.Material.Filled.CheckBoxOutlineBlank,
		_ when _selectedBooks.Count == BookManager.Books.Count => Icons.Material.Filled.CheckBox,
		_ => Icons.Material.Filled.IndeterminateCheckBox
	};
	
	private Action SelectIconAction => _selectedBooks.Count switch
	{
		0 => SelectAllBooks,
		_ when _selectedBooks.Count == BookManager.Books.Count => DeselectAllBooks,
		_ => SelectAllBooks
	};
	

	protected override async Task OnInitializedAsync()
	{
		GlobalEventsService.Subscribe<BookAdded>(OnBookAdded);

		ProfileId = await SessionService.GetAsync<Guid>(SessionKey.SelectedProfileId);

		await BookManager.GetBooksAsync(ProfileId);
		IsLoading = false;
	}
	
	private async Task OnBookAdded(BookAdded e)
	{
		await BookManager.AppendBookAsync(ProfileId, e.BookId);
		await InvokeAsync(StateHasChanged);
	}

	private void ToggleSelectMode()
	{
		IsSelectMode = !IsSelectMode;
		if (!IsSelectMode)
		{
			_selectedBooks.Clear();
		}
	}
	
	private void SelectAllBooks()
	{
		_selectedBooks.Clear();
		_selectedBooks.AddRange(BookManager.Books.Select(b => b.BookId));
	}
	
	private void DeselectAllBooks()
	{
		_selectedBooks.Clear();
	}
	
	private async Task OpenTagsDialog()
	{
		var parameters = new DialogParameters
		{
			{ nameof(TagsDialog.BookIds), _selectedBooks }
		};
		var dialog = await DialogService.ShowAsync<TagsDialog>(null, parameters);
		var result = await dialog.Result;

		if (!result!.Canceled)
		{
			// Handle result if needed
		}
	}

	public void Dispose()
	{
		GlobalEventsService.Unsubscribe<BookAdded>(OnBookAdded);
		JsRuntime.InvokeVoidAsync("saveScrollPosition", Urls.Shelf);
	}

}
