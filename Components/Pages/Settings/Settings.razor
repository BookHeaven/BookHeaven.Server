@attribute [Route(Urls.Settings)]
@using BookHeaven.EpubManager.Epub.Entities
@using BookHeaven.Server.Abstractions
@using BookHeaven.Server.Entities
@using BookHeaven.Server.Components.Pages.Settings.Components
<PageTitle>@Translations.SETTINGS</PageTitle>
<Toolbar>
	<MudSpacer />
	<MudTooltip Text="@Translations.SAVE">
		<MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="Save"/>
	</MudTooltip>
</Toolbar>
<div class="mx-auto w-10/12 flex flex-col gap-10">
	<section>
		<h1 class="mb-3">UI</h1>
		<MudStack Spacing="5">
			<MudSelect @bind-Value="_serverSettings.Culture" Label="@Translations.LANGUAGE" Variant="Variant.Filled" Class="flex-grow-0 min-w-[300px]">
				<MudSelectItem Value="@("es-ES")">Español</MudSelectItem>
				<MudSelectItem Value="@("en-US")">English</MudSelectItem>
			</MudSelect>
			@{
				var date = DateTime.Parse("2020-01-28");
			}
			<MudSelect @bind-Value="_serverSettings.DateFormat" Label="@Translations.DATE_FORMAT" Variant="Variant.Filled" Class="flex-grow-0 min-w-[300px]">
				@foreach(var format in _dateFormats)
				{
					<MudSelectItem Value="@format">@date.ToString(format) <span class="float-end ms-5">@format</span></MudSelectItem>
				}
			</MudSelect>
			<MudSelect @bind-Value="_serverSettings.LongDateFormat" Label="@Translations.LONG_DATE_FORMAT" Variant="Variant.Filled" Class="flex-grow-0 min-w-[300px]">
				@foreach(var format in _longDateFormats)
				{
					<MudSelectItem Value="@format">@date.ToString(format)</MudSelectItem>
				}
			</MudSelect>
		</MudStack>
	</section>
	<MudDivider />
	<section>
		<FontCollection />
	</section>
</div>

@code {
	[Inject] private IFormatService EpubService { get; set; } = null!;
	[Inject] private ISettingsManagerService SettingsManager { get; set; } = null!;
	[Inject] private NavigationManager NavigationManager { get; set; } = null!;
	
	private readonly List<string> _dateFormats = ["dd/MM/yyyy", "MM/dd/yyyy"];
	private readonly List<string> _longDateFormats = ["dddd, dd MMMM, yyyy", "dddd, MMMM dd, yyyy"];

	private ServerSettings _serverSettings = new();
	
	protected override async Task OnInitializedAsync()
	{
		_serverSettings = await SettingsManager.LoadSettingsAsync();
	}

	private async Task Save()
	{
		await SettingsManager.SaveSettingsAsync(_serverSettings);
		NavigationManager.NavigateTo($"api/culture/set?culture={Uri.EscapeDataString(_serverSettings.Culture)}&redirectUri={Uri.EscapeDataString(Urls.Settings)}", forceLoad: true);
	}
}