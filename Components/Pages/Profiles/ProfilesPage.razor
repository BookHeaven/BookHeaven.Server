@using BookHeaven.Domain.Features.Profiles
@using BookHeaven.Server.Abstractions
@attribute [Route(Urls.Profiles)]
@layout SimpleLayout

<PageTitle>Profiles</PageTitle>

@if (!_isLoaded)
{
	return;
}

@if (_layout == Layout.Select)
{
	<SectionContent SectionName="Tools">
		<MudButton Variant="Variant.Outlined" OnClick="() => _layout = Layout.Manage">
			Manage Profiles
		</MudButton>
	</SectionContent>
}


<div class="flex flex-col justify-center h-full">
	<h1 class="text-center text-4xl">
		@switch (_layout)
		{
			case Layout.Select:
				@:Select your profile
				break;
			case Layout.Manage:
				@:Manage profiles
				break;
		}
	</h1>
	<div class="flex items-center justify-center gap-10 my-30">
		@foreach (var profile in _profiles)
		{
			<button
				class="animate-zoom-in animate-duration-300 size-44 rounded-full flex items-center justify-center bg-slate-500 hover:bg-slate-400 transition-colors active:scale-95  @(profile.ProfileId == _selectedProfileId ? "outline-4 outline-(--mud-palette-primary) shadow-[0_0_25px_var(--mud-palette-primary)]" : "")"
				@onclick="() => SelectProfile(profile)">
				<span class="text-2xl">@profile.Name</span>
			</button>
		}
		<button class="animate-zoom-in animate-duration-300 size-44 rounded-full flex items-center justify-center text-slate-400 bg-slate-700">
			<MudIcon Icon="@Icons.Material.Filled.Add" Class="size-24"/>
		</button>
	</div>
</div>

@code {
	[Inject] private ISessionService SessionService { get; set; } = null!;
	[Inject] private ISender Sender { get; set; } = null!;
	[Inject] private NavigationManager NavigationManager { get; set; } = null!;
	
	private enum Layout
	{
		Select,
		Manage,
	}
	
	private bool _isLoaded;
	private Guid _selectedProfileId;
	private List<Profile> _profiles = [];
	private Layout _layout = Layout.Select;


	protected override async Task OnInitializedAsync()
	{
		var getProfiles = await Sender.Send(new GetAllProfiles.Query());
		if (getProfiles.IsSuccess)
		{
			_profiles = getProfiles.Value;
		}
		else
		{
			// Handle error, e.g., show a message to the user
			Console.WriteLine("Failed to load profiles: " + getProfiles.Error);
		}
		_selectedProfileId = await SessionService.GetAsync<Guid>(SessionKey.SelectedProfileId);
		_isLoaded = true;
	}

	private async Task SelectProfile(Profile profile)
	{
		switch (_layout)
		{
			case Layout.Select:
				await SessionService.SetAsync(SessionKey.SelectedProfileId, profile.ProfileId);
				NavigationManager.NavigateTo(Urls.Shelf);
				break;
			case Layout.Manage:
				_selectedProfileId = profile.ProfileId;
				break;
		}
	}

}