@using BookHeaven.Server.Features.Books
@attribute [Route(Urls.Shelf)]

<PageTitle>@Translations.SHELF</PageTitle>

<ScrollToTop />

<div class="tw-grid tw-grid-cols-[repeat(auto-fill,180px)] tw-gap-6 tw-justify-center">
	@if (IsLoading)
	{
		@for(var i = 0;i<50;i++)
		{
			<MudCard>
				<MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px"/>
				<MudCardContent>
					<MudSkeleton SkeletonType="SkeletonType.Text" Width="80%"/>
					<MudSkeleton SkeletonType="SkeletonType.Text" Width="60%"/>
					<MudSkeleton SkeletonType="SkeletonType.Text" Width="100%"/>
				</MudCardContent>
			</MudCard>
		}
	}
	else
	{
		@if (Books.Count == 0)
		{
			<p>Your Shelf is empty...</p>
		}
		else
		{
			@foreach (var book in Books)
			{
				<MudCard Elevation="4" Class="tw-group tw-overflow-hidden tw-flex tw-flex-col hover:tw-cursor-pointer" @onclick="@(() => NavigationManager.NavigateTo(Urls.GetBookUrl(book.BookId)))">
					<div class="tw-h-[250px] tw-overflow-hidden">
						<MudCardMedia Image="@Assets[book.CoverUrl]" Class="tw-transition-transform tw-h-full tw-duration-150 group-hover:tw-scale-105" />
					</div>
					<MudCardContent Class="tw-flex-1 tw-flex tw-flex-col tw-gap-1 group-hover:tw-bg-slate-700">
						<MudText Typo="Typo.body2">@book.Title</MudText>
						<MudText Typo="Typo.body2" Color="Color.Secondary">@book.Author?.Name</MudText>
						<MudText Typo="Typo.caption" Color="Color.Primary">@book.Series?.Name</MudText>
					</MudCardContent>
				</MudCard>

			}
		}
		
		
	}
	
</div>

@code {
	[Inject] private NavigationManager NavigationManager { get; set; } = null!;
	[Inject] private ISender Sender { get; set; } = null!;
	private bool IsLoading { get; set; } = true;
	private List<Book> Books { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		var getBooks = await Sender.Send(new GetAllBooksQuery());
		Books = getBooks.Value.OrderBy(b => b.Author?.Name).ThenBy(b => b.Series?.Name).ThenBy(b => b.SeriesIndex).ToList();
		IsLoading = false;
	}
}
