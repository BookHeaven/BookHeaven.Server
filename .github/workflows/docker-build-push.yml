name: Build and push docker image
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      exists: ${{ steps.check-image.outputs.exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      - name: Get version
        id: get-version
        run: |
          VERSION=$(nbgv get-version | grep NuGetPackageVersion | cut -d ':' -f2 | xargs)
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

      - name: Check if Docker image version exists
        id: check-image
        run: |
          if docker pull ghcr.io/bookheaven/bookheaven-server:${{ steps.get-version.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.exists == 'false'
    permissions:
      contents: write
      packages: write
      
    env:
      IMAGE_NAME: bookheaven-server
      GITHUB_REGISTRY: ghcr.io
      GITHUB_USER: bookheaven
      DOCKERHUB_REGISTRY: docker.io
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      VERSION: ${{ needs.check-version.outputs.version }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node js
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          
      - name: Move Server to BookHeaven directory
        run: |
          mkdir -p BookHeaven/BookHeaven.Server
          shopt -s extglob
          mv !(BookHeaven) BookHeaven/BookHeaven.Server/
          
      - name: Clone EbookManager
        run: |
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/BookHeaven/BookHeaven.EbookManager.git temp/BookHeaven.EbookManager
          mkdir -p BookHeaven/BookHeaven.EbookManager
          mv temp/BookHeaven.EbookManager/* BookHeaven/BookHeaven.EbookManager/
          
      - name: Clone BookHeaven.Domain
        run: |
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/BookHeaven/BookHeaven.Domain.git temp/BookHeaven.Domain
          mkdir -p BookHeaven/BookHeaven.Domain
          mv temp/BookHeaven.Domain/* BookHeaven/BookHeaven.Domain/
          
      - name: Install npm packages
        working-directory: ./BookHeaven/BookHeaven.Server
        run: npm ci
        
      - name: Build tailwindcss
        working-directory: ./BookHeaven/BookHeaven.Server
        run: npm run tailwindcss:build
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.GITHUB_REGISTRY }} -u "${{ github.repository_owner }}" --password-stdin

      - name: Build and push multi-arch image to GHCR
        run: |
          GITHUB_IMAGE="${GITHUB_REGISTRY}/${GITHUB_USER}/${IMAGE_NAME}"
          docker buildx build ./BookHeaven \
            --build-arg GOOGLE_BOOKS_API_KEY=${{ secrets.GOOGLE_BOOKS_API_KEY }} \
            --file BookHeaven/BookHeaven.Server/Dockerfile \
            --platform linux/amd64,linux/arm64 \
            --tag $GITHUB_IMAGE:latest \
            --tag $GITHUB_IMAGE:$VERSION \
            --push

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push multi-arch image to Docker Hub
        run: |
          DOCKERHUB_IMAGE="${DOCKERHUB_REGISTRY}/${DOCKERHUB_USER}/${IMAGE_NAME}"
          docker buildx build ./BookHeaven \
            --build-arg GOOGLE_BOOKS_API_KEY=${{ secrets.GOOGLE_BOOKS_API_KEY }} \
            --file BookHeaven/BookHeaven.Server/Dockerfile \
            --platform linux/amd64,linux/arm64 \
            --tag $DOCKERHUB_IMAGE:latest \
            --tag $DOCKERHUB_IMAGE:$VERSION \
            --push
          
      - name: Create Tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              ref: `refs/tags/v${{ env.VERSION }}`
            })
        
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true
          make_latest: true
